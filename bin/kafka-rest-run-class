#!/bin/bash
#
# Copyright 2014 Confluent Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

base_dir=$(dirname $0)/..

add_streams_paths(){
  local MAPR_LIB_DIR="${BASEMAPR:-/opt/mapr}/lib"
  local MAPR_STREAMS_LIB=$(ls ${MAPR_LIB_DIR}/mapr-streams*.jar 2> /dev/null | grep -v "tests.jar$" )
  local PROTOBUF_LIB=$(ls ${MAPR_LIB_DIR}/protobuf-java*.jar 2> /dev/null)
  local MAPRFS_LIB=$(ls ${MAPR_LIB_DIR}/maprfs-6*SNAPSHOT.jar 2> /dev/null)
  local STREAMS_CLIENTS_LIB=$(ls ${MAPR_LIB_DIR}/kafka-clients*.jar 2> /dev/null)
  local MAPRDB_LIB=$(ls ${MAPR_LIB_DIR}/maprdb-6*SNAPSHOT.jar 2> /dev/null| grep -v "tests.jar$" | tr '\n' ':')

  local HADOOP_LIB=$(ls ${MAPR_LIB_DIR}/hadoop*.jar 2> /dev/null | grep -v "tests.jar$" | tr '\n' ':' )
  local COMMONS_LIB=$(ls ${MAPR_LIB_DIR}/commons*.jar 2> /dev/null | grep -v "tests.jar$" | tr '\n' ':' )
  local GUAVA_LIB=$(ls ${MAPR_LIB_DIR}/guava*.jar 2> /dev/null | grep -v "tests.jar$")
  local JSON_LIB=$(ls ${MAPR_LIB_DIR}/json*.jar 2> /dev/null | grep -v "tests.jar$" | tr '\n' ':' )
  local OJAI_LIB=$(ls ${MAPR_LIB_DIR}/ojai-2*.jar 2> /dev/null)

  CLASSPATH="${MAPR_STREAMS_LIB}:${CLASSPATH}"
  CLASSPATH="${PROTOBUF_LIB}:${CLASSPATH}"
  CLASSPATH="${MAPRFS_LIB}:${CLASSPATH}"
  CLASSPATH="${STREAMS_CLIENTS_LIB}:${CLASSPATH}"
  CLASSPATH="${MAPRDB_LIB}:${CLASSPATH}"

  CLASSPATH="${HADOOP_LIB}:${CLASSPATH}"
  CLASSPATH="${COMMONS_LIB}:${CLASSPATH}"
  CLASSPATH="${GUAVA_LIB}:${CLASSPATH}"
  CLASSPATH="${JSON_LIB}:${CLASSPATH}"
  CLASSPATH="${OJAI_LIB}:${CLASSPATH}"
}

# Development jars. `mvn package` should collect all the required dependency jars here
for dir in $base_dir/target/kafka-rest-*-development; do
  CLASSPATH=$CLASSPATH:$dir/share/java/kafka-rest/*
done

# Production jars
for library in "confluent-common" "rest-utils" "kafka-rest"; do
  CLASSPATH=$CLASSPATH:$base_dir/share/java/$library/*
done

# logj4 settings
if [ "x$KAFKAREST_LOG4J_OPTS" = "x" ]; then
  # Test for files from dev -> packages so this will work as expected in dev if you have packages
  # installed
  if [ -e "$base_dir/config/log4j.properties" ]; then # Dev environment
    KAFKAREST_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/config/log4j.properties"
  elif [ -e "$base_dir/etc/kafka-rest/log4j.properties" ]; then # Simple zip file layout
    KAFKAREST_LOG4J_OPTS="-Dlog4j.configuration=file:$base_dir/etc/kafka-rest/log4j.properties"
  elif [ -e "/etc/kafka-rest/log4j.properties" ]; then # Normal install layout
    KAFKAREST_LOG4J_OPTS="-Dlog4j.configuration=file:/etc/kafka-rest/log4j.properties"
  fi
fi

# Add native library path to LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(get_hadoop_libpath)" # function in mapr-config.sh

# JMX settings
if [ -z "$KAFKAREST_JMX_OPTS" ]; then
  KAFKAREST_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false "
fi

# JMX port to use
if [  $JMX_PORT ]; then
  KAFKAREST_JMX_OPTS="$KAFKAREST_JMX_OPTS -Dcom.sun.management.jmxremote.port=$JMX_PORT "
fi

# Generic jvm settings you want to add
if [ -z "$KAFKAREST_OPTS" ]; then
  KAFKAREST_OPTS=""
fi

# Which java to use
if [ -z "$JAVA_HOME" ]; then
  JAVA="java"
else
  JAVA="$JAVA_HOME/bin/java"
fi

# Memory options
if [ -z "$KAFKAREST_HEAP_OPTS" ]; then
  KAFKAREST_HEAP_OPTS="-Xmx256M"
fi

# JVM performance options
if [ -z "$KAFKAREST_JVM_PERFORMANCE_OPTS" ]; then
  KAFKAREST_JVM_PERFORMANCE_OPTS="-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+DisableExplicitGC -Djava.awt.headless=true"
fi

MAIN=$1
shift

while [ $# -gt 0 ]; do
  COMMAND=$1
  case $COMMAND in
    -help)
      HELP="true"
      shift
      ;;
    -daemon)
      DAEMON_MODE="true"
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [ "x$HELP" = "xtrue" ]; then
  echo "USAGE: $0 [-daemon] [opts] [-help]"
  exit 0
fi

add_streams_paths
pid="${BASEMAPR:-/opt/mapr}/pid/kafka-rest.pid"
env=${BASEMAPR:-/opt/mapr}/conf/env.sh
[ -f $env ] && . $env

if [ "$MAPR_SECURITY_STATUS" = "true" ]; then
  KAFKAREST_SECURITY_OPTS="$KAFKAREST_SECURITY_OPTS $MAPR_AUTH_CLIENT_OPTS -Djava.library.path=/opt/mapr/lib -Dmapr.library.flatclass"
else
  KAFKAREST_SECURITY_OPTS="$KAFKAREST_SECURITY_OPTS $SIMPLE_LOGIN_OPTS -Djava.library.path=/opt/mapr/lib -Dmapr.library.flatclass"
fi

# Launch mode
if [ "x$DAEMON_MODE" = "xtrue" ]; then
  nohup $JAVA $KAFKAREST_HEAP_OPTS $KAFKAREST_JVM_PERFORMANCE_OPTS $KAFKAREST_JMX_OPTS $KAFKAREST_LOG4J_OPTS $KAFKAREST_SECURITY_OPTS -cp $CLASSPATH $KAFKAREST_OPTS "$MAIN" "$@" 2>&1 < /dev/null &
  echo $! > $pid
else
  exec $JAVA $KAFKAREST_HEAP_OPTS $KAFKAREST_JVM_PERFORMANCE_OPTS $KAFKAREST_JMX_OPTS $KAFKAREST_LOG4J_OPTS $KAFKAREST_SECURITY_OPTS -cp $CLASSPATH $KAFKAREST_OPTS "$MAIN" "$@" & echo $! > $pid
fi
